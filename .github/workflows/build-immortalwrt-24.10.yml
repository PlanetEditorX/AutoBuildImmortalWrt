name: build-immortalwrt-24.10
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 10 * * 1'  # 每周一的上午10点（UTC时间，对应北京时间下午6点）
  workflow_dispatch:
    inputs:
      profile:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '512'
      ipaddr:
        description: '输入管理IP(空为DHCP获取)'
        required: false
        default: '192.168.3.100'
      gateway:
        description: '输入默认网关'
        required: false
        default: '192.168.3.1'
      include_docker:
        description: '是否编译 Docker 插件'
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      compile_image:
        description: '是否编译镜像'
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      version_source:
        description: '获取最新版本号方式'
        required: true
        default: 'GitHub'
        type: choice
        options:
          - 'GitHub'
          - 'Docker Hub'
      version:
        description: '输入版本号,格式为X.Y.Z,为空则版本号加1'
        required: false
        default: ''
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false
jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      PROFILE: ${{ github.event.inputs.profile || '512' }}
      IPADDR: ${{ github.event.inputs.ipaddr || '192.168.3.100' }}
      GATEWAY: ${{ github.event.inputs.gateway || '192.168.3.1' }}
      INCLUDE_DOCKER: ${{ github.event.inputs.include_docker || 'no' }}
      ENABLE_PPPOE: ${{ github.event.inputs.enable_pppoe || 'no' }}
      PPPOE_ACCOUNT: ${{ github.event.inputs.pppoe_account || '' }}
      PPPOE_PASSWORD: ${{ github.event.inputs.pppoe_password || '' }}
      VERSION: ${{ github.event.inputs.version || '' }}
      VERSION_SOURCE: ${{ github.event.inputs.version_source || 'GitHub' }}
      COMPILE_IMAGE: ${{ github.event.inputs.compile_image || 'yes' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest Docker tag
        if: ${{ env.VERSION_SOURCE == 'Docker Hub' }}
        run: |
          # 通过page=2&page_size=1限制获取最新版本号，page=1&page_size=1为latest，page=2&page_size=1为X.Y.Z-arm
          TAGS_URL="https://registry.hub.docker.com/v2/namespaces/${{ secrets.DOCKER_USERNAME }}/repositories/immortalwrt/tags?page=2&page_size=1"
          TAGS_RESPONSE=$(curl -s $TAGS_URL)
          docker_tag=$(echo $TAGS_RESPONSE | jq -r '.results[] | .name' | sort -V | tail -n1 | awk -F'-' '{print $1}')
          # 输出X.Y.Z
          echo "docker_tag=$docker_tag" >> $GITHUB_ENV

      - name: Get latest tag And Increment Version
        run: |
          # 输入不为空时以输入为准
          if [ $VERSION != "" ]; then
            NEW_VERSION=$VERSION
          else
            # 为空以获取为准
            # 获取最新的 tag 提取版本号部分
            if [ $VERSION_SOURCE == "GitHub" ]; then
              echo "从仓库中获取版本号"
              version=$(curl -s https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[0].name' | sed 's/^Autobuild-x86-64-//')
            else
              echo "从Docker Hub中获取版本号"
              version=${{ env.docker_tag }}
            fi

            # 当前版本为空时初始化版本号
            if [[ "$version" == "null" ]]; then
              NEW_VERSION='v1.0.0'
            else
              # 读取最新版本号并分割为数组
              # 使用 IFS 分割版本号
              IFS='.' read -r major minor patch <<< "$version"

              # 去除 major 中的 "v"
              major=$(echo "$major" | sed 's/^v//')

              # 输出结果
              echo "Major: $major"
              echo "Minor: $minor"
              echo "Patch: $patch"

              # 递增补丁版本号
              patch=$((patch + 1))
              # 如果补丁版本号达到10，重置为0并递增次版本号
              if [ $patch -eq 10 ]; then
                  patch=0
                  minor=$((minor + 1))
                  # 如果次版本号达到10，重置为0并递增主版本号
                  if [ $minor -eq 10 ]; then
                      minor=0
                      major=$((major + 1))
                  fi
              fi

              # 构造新版本号
              NEW_VERSION="v$major.$minor.$patch"
            fi
          fi
          echo "NEW_VERSION: ${NEW_VERSION}"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Install Software
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-utils
          sudo apt-get install -y jq

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/src/24.10/build.sh

      - name: Replace custom_ip value
        if: ${{ env.IPADDR != '' }}
        run: |
          sed -i "s/custom_ip=\"dhcp\"/custom_ip=\"$IPADDR\"/g" ${{ github.workspace }}/src/files/etc/uci-defaults/99-custom.sh
          sed -i "s/custom_gateway=\"\"/custom_gateway=\"$GATEWAY\"/g" ${{ github.workspace }}/src/files/etc/uci-defaults/99-custom.sh
          cat ${{ github.workspace }}/src/files/etc/uci-defaults/99-custom.sh

      - name: Validate PPPoE Inputs
        run: |
          if [[ $ENABLE_PPPOE == "yes" ]]; then
            if [[ -z $PPPOE_ACCOUNT || -z $PPPOE_PASSWORD ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Build ImmortalWrt-x86-64-efi
        if: ${{ env.COMPILE_IMAGE == 'yes' }}
        run: |
          profiles=$PROFILE
          include_docker=$INCLUDE_DOCKER
          IFS=',' read -r -a profile_array <<< "$profiles"

          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"
            echo "Run Containers for amd64"
            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/src/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/src/x86-64/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/src/24.10/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ENABLE_PPPOE=$ENABLE_PPPOE \
              -e PPPOE_ACCOUNT=$PPPOE_ACCOUNT \
              -e PPPOE_PASSWORD=$PPPOE_PASSWORD \
              immortalwrt/imagebuilder:x86-64-openwrt-24.10 \
              /bin/bash /home/build/immortalwrt/build.sh
          done

      - name: GET IMG for x86-64
        if: ${{ env.COMPILE_IMAGE == 'yes' }}
        continue-on-error: true
        run: |
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}
          for file in *squashfs-combined-efi.img.gz; do
            ls
            echo "Gunzip $file"
            # 解压
            gunzip -k $file
          done

      - name: IMG Convert QCOW2 for x86-64
        if: ${{ env.COMPILE_IMAGE == 'yes' }}
        run: |
          for file in *-x86-64-generic-squashfs-combined-efi.img; do
            # 提取文件名的前面部分(去掉 .img)
            base_name="${file%.img}"

            # 输出文件名并保存到变量
            echo "Base name saved to variable: $base_name"

            # 镜像转换, 将 img 转换为 qcow2
            qemu-img convert -O qcow2 ${base_name}.img ${base_name}.qcow2
          done

          # 压缩qcow2文件
          gzip -k -f ${base_name}.qcow2

      - name: Build ImmortalWrt-armsr-armv8-efi
        if: ${{ env.COMPILE_IMAGE == 'yes' }}
        run: |
          profiles=$PROFILE
          include_docker=$INCLUDE_DOCKER
          IFS=',' read -r -a profile_array <<< "$profiles"

          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"
            echo "Run Containers for armv8"
            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/src/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/src/24.10/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ENABLE_PPPOE=$ENABLE_PPPOE \
              -e PPPOE_ACCOUNT=$PPPOE_ACCOUNT \
              -e PPPOE_PASSWORD=$PPPOE_PASSWORD \
              immortalwrt/imagebuilder:armsr-armv8-openwrt-24.10 \
              /bin/bash /home/build/immortalwrt/build.sh
          done

      - name: GET IMG, QCOW2 And Vmdk for armv8
        if: ${{ env.COMPILE_IMAGE == 'yes' }}
        continue-on-error: true
        run: |
          tree -a
          cp ${{ github.workspace }}/bin/targets/armsr/armv8/*-squashfs-combined-efi.* ${{ github.workspace }}
          echo "重命名armv8文件"
          for f in immortalwrt-*-armsr-armv8-generic-squashfs-combined-efi.*; do
            new_name="${f/-r*-armsr/-armsr}" # 自动截断中间动态部分
            mv -nv "$f" "$new_name"
          done
          # 压缩qcow2文件
          gzip -k -f *-squashfs-combined-efi.qcow2

          # 压缩vmdk文件
          gzip -k -f *-squashfs-combined-efi.vmdk
          ls -l ${{ github.workspace }}

      - name: Download and Extract RootFS
        run: |
          mkdir -p immortalwrt
          cd immortalwrt
          wget -O rootfs_amd64.tar.gz https://downloads.immortalwrt.org/releases/24.10.0-rc3/targets/x86/64/immortalwrt-24.10.0-rc3-x86-64-rootfs.tar.gz
          wget -O rootfs_arm64.tar.gz https://downloads.immortalwrt.org/releases/24.10.0-rc3/targets/armsr/armv8/immortalwrt-24.10.0-rc3-armsr-armv8-rootfs.tar.gz
          gzip -d rootfs_amd64.tar.gz
          gzip -d rootfs_arm64.tar.gz

      - name: Move rootfs.tar.gz to build context
        run: |
          mkdir -p ./src/amd64 ./src/arm64
          mv immortalwrt/rootfs_amd64.tar ./src/amd64/rootfs.tar
          mv immortalwrt/rootfs_arm64.tar ./src/arm64/rootfs.tar

      - name: Build AMD Docker image
        run: |
          cp ${{ github.workspace }}/src/Dockerfile ./src/amd64
          cp ${{ github.workspace }}/src/Dockerfile ./src/arm64
          docker build -t immortalwrt:initial-amd64 ./src/amd64

      - name: Build ARM Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: ./src/arm64
          file: ./src/arm64/Dockerfile
          platforms: linux/arm64
          tags: immortalwrt:initial-arm64
          push: false  # 不推送镜像

      - name: Ensure Docker image exists
        run: |
          if ! docker image inspect immortalwrt:initial-arm64 &> /dev/null; then
            echo "Image 'immortalwrt:initial-arm64' not found. Rebuilding..."
            docker build -t immortalwrt:initial-arm64 --platform linux/arm64 ./src/arm64
          fi

      - name: List local Docker images
        run: docker images

      - name: Run container in immortalwrt-arm64
        run: |
          docker run -d \
            --name immortalwrt-arm64 \
            --platform linux/arm64 \
            --privileged \
            immortalwrt:initial-arm64 \
            /bin/sh -c "while true; do sleep 1000; done"

          docker exec immortalwrt-arm64 sh -c "
            mkdir -p /tmp/log /var/lock
            opkg update
            opkg install curl luci-i18n-diskman-zh-cn luci-i18n-firewall-zh-cn luci-app-argon-config luci-i18n-argon-config-zh-cn luci-i18n-package-manager-zh-cn luci-i18n-ttyd-zh-cn luci-i18n-passwall-zh-cn luci-app-openclash luci-i18n-homeproxy-zh-cn openssh-sftp-server fdisk script-utils luci-i18n-samba4-zh-cn
          "

      - name: Commit modified container in immortalwrt-arm64
        run: |
          docker exec immortalwrt-arm64 sh -c "cat <<EOF > /etc/config/network
            config interface 'loopback'
              option device 'lo'
              option proto 'static'
              option ipaddr '127.0.0.1'
              option netmask '255.0.0.0'

            config interface 'lan'
              option proto 'static'
              option device 'eth0'
              option ipaddr '${IPADDR}'
              option netmask '255.255.255.0'
              option gateway '${GATEWAY}'
              list dns '223.5.5.5'
              list dns '1.1.1.1'
            EOF"
          docker commit immortalwrt-arm64 immortalwrt:arm64

      - name: Run container in immortalwrt-amd64
        run: |
          docker run -d \
            --name immortalwrt-amd64 \
            --platform linux/amd64 \
            --privileged \
            immortalwrt:initial-amd64 \
            /bin/sh -c "while true; do sleep 1000; done"

          docker exec immortalwrt-amd64 sh -c "
            mkdir -p /tmp/log /var/lock
            opkg update
            opkg install curl luci-i18n-diskman-zh-cn luci-i18n-firewall-zh-cn luci-app-argon-config luci-i18n-argon-config-zh-cn luci-i18n-package-manager-zh-cn luci-i18n-ttyd-zh-cn luci-i18n-passwall-zh-cn luci-app-openclash luci-i18n-homeproxy-zh-cn openssh-sftp-server fdisk script-utils luci-i18n-samba4-zh-cn
          "

      - name: Commit modified container in immortalwrt-amd64
        run: |
          docker exec immortalwrt-amd64 sh -c "cat <<EOF > /etc/config/network
            config interface 'loopback'
              option device 'lo'
              option proto 'static'
              option ipaddr '127.0.0.1'
              option netmask '255.0.0.0'

            config interface 'lan'
              option proto 'static'
              option device 'eth0'
              option ipaddr '${IPADDR}'
              option netmask '255.255.255.0'
              option gateway '${GATEWAY}'
              list dns '223.5.5.5'
              list dns '1.1.1.1'
            EOF"
          docker commit immortalwrt-amd64 immortalwrt:amd64

      - name: Containers To Image And Push Docker Image
        run: |
          # 将容器打包为镜像
          docker commit immortalwrt-amd64 immortalwrt:amd64
          docker commit immortalwrt-arm64 immortalwrt:arm64
          # 新增标签并推送
          docker tag immortalwrt:amd64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:amd
          docker tag immortalwrt:arm64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:arm
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:amd
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:arm
          # 去除 VERSION 中的 "v"
          tags=$(echo "$VERSION" | sed 's/^v//')
          echo "Tags: $tags"
          docker tag immortalwrt:amd64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${tags}-amd
          docker tag immortalwrt:arm64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${tags}-arm
          docker tag immortalwrt:arm64 ${{ secrets.DOCKER_USERNAME }}/immortalwrt:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${tags}-amd
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:${tags}-arm
          docker push ${{ secrets.DOCKER_USERNAME }}/immortalwrt:latest
          docker ps -a

      - name: Create info
        run: |
          if [ $INCLUDE_DOCKER == "yes" ]; then
            extra_content="#### 默认带docker"
            echo -e "\n $extra_content" >> ${{ github.workspace }}/info.md
          else
            echo -e "NO docker"
          fi

      - name: Generate info.md
        run: |
          # 创建或修改 info.md 文件
          echo "[![Github](https://img.shields.io/badge/Release文件可在国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://wkdaily.cpolar.top/archives/1)" >> info.md
          if [ -n $IPADDR ]; then
            echo "#### 固件地址: \`$IPADDR\`" >> info.md
          else
            echo "#### 固件地址: DHCP获取，查看上级路由" >> info.md
          fi
          echo "#### 用户名: \`root\` 密码：无" >> info.md
          echo "#### 默认软件包大小: $PROFILE MB" >> info.md
          cat info.md

      - name: Upload ImmortWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        if: ${{ env.COMPILE_IMAGE == 'yes' }}
        with:
          tag_name: AutoBuild-ImmortalWrt-${{ env.VERSION }}
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*squashfs-combined-efi.*.gz
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


name: build-x86-64-immortalwrt-24.10.0

on:
  workflow_dispatch:
    inputs:
      profile:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '1024'
      include_docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: 'yes'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/x86-64/build.sh


      - name: Validate PPPoE Inputs
        run: |
          if [[ "${{ inputs.enable_pppoe }}" == "yes" ]]; then
            if [[ -z "${{ inputs.pppoe_account }}" || -z "${{ inputs.pppoe_password }}" ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Build ImmortalWrt-x86-64-efi
        run: |
          profiles="${{ github.event.inputs.profile }}"
          include_docker="${{ github.event.inputs.include_docker }}"
          IFS=',' read -r -a profile_array <<< "$profiles"

          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"

            docker run --rm -i \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/x86-64/24.10/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ENABLE_PPPOE=${{ inputs.enable_pppoe }} \
              -e PPPOE_ACCOUNT=${{ inputs.pppoe_account }} \
              -e PPPOE_PASSWORD=${{ inputs.pppoe_password }} \
              immortalwrt/imagebuilder:x86-64-openwrt-24.10.0 /bin/bash /home/build/immortalwrt/build.sh
          done

      - name: Verify and Process Image
        run: |
          # 复制 squashfs-combined-efi.img.gz 文件到工作区
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}

          # 检查文件是否存在
          if [ ! -f *squashfs-combined-efi.img.gz ]; then
              echo "Error: No squashfs image found."
              exit 1
          else
              # 获取匹配的文件名
              file_name=$(ls *squashfs-combined-efi.img.gz)

              # 检查是否只有一个文件匹配
              if [ $(ls *squashfs-combined-efi.img.gz | wc -l) -ne 1 ]; then
                  echo "Error: Multiple squashfs images found."
                  exit 1
              fi

              # 提取文件名的前面部分（去掉 .img.gz）
              base_name="${file_name%.img.gz}"

              # 输出文件名并保存到变量
              echo " squashfs image found: $file_name"
              echo "Base name saved to variable: $base_name"

              squashfs_image="$base_name"

              # 你可以在这里继续使用 $squashfs_image 变量
              echo "The base name of the squashfs image is saved in variable: $squashfs_image"
          fi

          # 解压 .img.gz 文件
          gunzip *squashfs-combined-efi.img.gz

          # 检查解压后的 .img 文件是否存在
          if [ ! -f *squashfs-combined-efi.img ]; then
            echo "Error: Failed to decompress image."
            exit 1
          fi

          # 将 .img 文件转换为 ISO 文件
          # 假设 .img 文件是一个可挂载的文件系统
          # 创建挂载点
          mkdir -p img_mount
          # 挂载 .img 文件
          mount -o loop *squashfs-combined-efi.img img_mount
          # 使用 genisoimage 或 mkisofs 创建 ISO 文件
          genisoimage -o squashfs-combined-efi.iso -J -r img_mount/
          # 卸载挂载点
          umount img_mount
          # 删除挂载点
          rmdir img_mount

          # 检查生成的 ISO 文件是否存在
          if [ ! -f squashfs-combined-efi.iso ]; then
            echo "Error: Failed to create ISO file."
            exit 1
          fi

          # 压缩 ISO 文件
          gzip -c squashfs-combined-efi.iso > "${squashfs_image}.iso.gz"

          # 检查压缩后的 .iso.gz 文件是否存在
          if [ ! -f "${squashfs_image}.iso.gz" ]; then
              echo "Error: Failed to compress ISO file."
              exit 1
          fi

      - name: Create info
        run: |
          if [ "${{ github.event.inputs.include_docker }}" == "yes" ]; then
            extra_content="#### 默认带docker"
            echo -e "\n $extra_content" >> ${{ github.workspace }}/info.md
          else
            echo -e "NO docker"
          fi

      - name: Upload ImmortWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Autobuild-x86-64
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*squashfs-combined-efi.img.gz
            ${{ github.workspace }}/*squashfs-combined-efi.iso.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


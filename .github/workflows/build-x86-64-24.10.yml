name: build-x86-64-immortalwrt-24.10.0
on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 10 * * 1'  # 每周一的上午10点（UTC时间，对应北京时间下午6点）
  workflow_dispatch:
    inputs:
      profile:
        description: '请输入要编译固件大小 单位(MB)'
        required: true
        default: '512'
      ipaddr:
        description: '输入管理IP(空为DHCP获取)'
        required: false
        default: '192.168.3.100'
      gateway:
        description: '输入默认网关'
        required: false
        default: '192.168.3.1'
      include_docker:
        description: |
          是否编译 Docker 插件
        required: true
        default: 'no'
        type: choice
        options:
          - 'yes'
          - 'no'
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: 'no'
        type: choice
        options:
        - 'yes'
        - 'no'
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false
      version:
        description: '输入版本号,格式为X.Y.Z,为空则版本号加1'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      PROFILE: ${{ github.event.inputs.profile || '512' }}
      IPADDR: ${{ github.event.inputs.ipaddr || '192.168.3.100' }}
      GATEWAY: ${{ github.event.inputs.gateway || '192.168.3.1' }}
      INCLUDE_DOCKER: ${{ github.event.inputs.include_docker || 'no' }}
      ENABLE_PPPOE: ${{ github.event.inputs.enable_pppoe || 'no' }}
      PPPOE_ACCOUNT: ${{ github.event.inputs.pppoe_account || '' }}
      PPPOE_PASSWORD: ${{ github.event.inputs.pppoe_password || '' }}
      VERSION: ${{ github.event.inputs.version || 'v1.0.0' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get latest tag And Increment Version
        run: |
          # 输入不为空时以输入为准
          if [ $VERSION != "" ]; then
            NEW_VERSION=$VERSION
          else
            # 为空以获取为准
            # 获取最新的 tag 提取版本号部分
            version=$(curl -s https://api.github.com/repos/${{ github.repository }}/tags | jq -r '.[0].name' | sed 's/^Autobuild-x86-64-//')
            # 当前版本为空时初始化版本号
            if [[ "$version" == "null" ]]; then
              NEW_VERSION='v1.0.0'
            else
              # 读取最新版本号并分割为数组
              # 使用 IFS 分割版本号
              IFS='.' read -r major minor patch <<< "$version"

              # 去除 major 中的 "v"
              major=$(echo "$major" | sed 's/^v//')

              # 输出结果
              echo "Major: $major"
              echo "Minor: $minor"
              echo "Patch: $patch"

              # 递增补丁版本号
              patch=$((patch + 1))
              # 如果补丁版本号达到10，重置为0并递增次版本号
              if [ $patch -eq 10 ]; then
                  patch=0
                  minor=$((minor + 1))
                  # 如果次版本号达到10，重置为0并递增主版本号
                  if [ $minor -eq 10 ]; then
                      minor=0
                      major=$((major + 1))
                  fi
              fi

              # 构造新版本号
              NEW_VERSION="v$major.$minor.$patch"
            fi
          fi
          echo "NEW_VERSION: ${NEW_VERSION}"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Install Software
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-utils
          sudo apt-get install -y jq

      - name: Set executable permissions
        run: chmod +x ${{ github.workspace }}/x86-64/build.sh

      - name: Replace custom_ip value
        if: ${{ env.IPADDR != '' }}
        run: |
          # sed -i 's/custom_ip="dhcp"/custom_ip=\"$IPADDR\"/g' ${{ github.workspace }}/files/etc/uci-defaults/99-custom.sh
          # sed -i 's/custom_gateway=""/custom_gateway=\"$GATEWAY\"/g' ${{ github.workspace }}/files/etc/uci-defaults/99-custom.sh
          sed -i "s/custom_ip=\"dhcp\"/custom_ip=\"$IPADDR\"/g" ${{ github.workspace }}/files/etc/uci-defaults/99-custom.sh
          sed -i "s/custom_gateway=\"\"/custom_gateway=\"$GATEWAY\"/g" ${{ github.workspace }}/files/etc/uci-defaults/99-custom.sh
          cat ${{ github.workspace }}/files/etc/uci-defaults/99-custom.sh

      - name: Validate PPPoE Inputs
        run: |
          if [[ $ENABLE_PPPOE == "yes" ]]; then
            if [[ -z $PPPOE_ACCOUNT || -z $PPPOE_PASSWORD ]]; then
              echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
              exit 1
            fi
          fi

      - name: Build ImmortalWrt-x86-64-efi
        run: |
          profiles=$PROFILE
          include_docker=$INCLUDE_DOCKER
          IFS=',' read -r -a profile_array <<< "$profiles"

          for profile in "${profile_array[@]}"; do
            echo "Building for profile: $profile"
            echo "Run Containers for amd64"
            docker run -i \
              --name immortalwrt-amd64 \
              --user root \
              -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
              -v "${{ github.workspace }}/files:/home/build/immortalwrt/files" \
              -v "${{ github.workspace }}/x86-64/imm.config:/home/build/immortalwrt/.config" \
              -v "${{ github.workspace }}/x86-64/24.10/build.sh:/home/build/immortalwrt/build.sh" \
              -e PROFILE=$profile \
              -e INCLUDE_DOCKER=$include_docker \
              -e ENABLE_PPPOE=$ENABLE_PPPOE \
              -e PPPOE_ACCOUNT=$PPPOE_ACCOUNT \
              -e PPPOE_PASSWORD=$PPPOE_PASSWORD \
              immortalwrt/imagebuilder:x86-64-openwrt-24.10 \
              /bin/bash /home/build/immortalwrt/build.sh
          done

      - name: GET IMG for x86-64
        continue-on-error: true
        run: |
          cp ${{ github.workspace }}/bin/targets/x86/64/*squashfs-combined-efi.img.gz ${{ github.workspace }}
          for file in *squashfs-combined-efi.img.gz; do
            ls
            echo "Gunzip $file"
            # 解压
            gunzip -k $file
          done

      - name: IMG Convert Qcow2 for x86-64
        run: |
          for file in *-x86-64-generic-squashfs-combined-efi.img; do
            # 提取文件名的前面部分(去掉 .img)
            base_name="${file%.img}"

            # 输出文件名并保存到变量
            echo "Base name saved to variable: $base_name"

            # 镜像转换
            # 将 img 转换为 qcow2
            qemu-img convert -O qcow2 ${base_name}.img ${base_name}.qcow2
          done

          # 压缩qcow2文件
          gzip -k -f ${base_name}.qcow2

      - name: Generate Firmware SHA-256
        run: |
          for file in *squashfs-combined-efi.*gz; do
            sha256sum "$file" > "$file.sha256"
            sha256sum -c "$file.sha256"
          done

      - name: Create info
        run: |
          if [ $INCLUDE_DOCKER == "yes" ]; then
            extra_content="#### 默认带docker"
            echo -e "\n $extra_content" >> ${{ github.workspace }}/info.md
          else
            echo -e "NO docker"
          fi

      - name: Generate info.md
        run: |
          # 创建或修改 info.md 文件
          echo "[![Github](https://img.shields.io/badge/Release文件可在国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://wkdaily.cpolar.top/archives/1)" >> info.md
          if [ -n $IPADDR ]; then
            echo "#### 固件地址: \`$IPADDR\`" >> info.md
          else
            echo "#### 固件地址: DHCP获取，查看上级路由" >> info.md
          fi
          echo "#### 用户名: \`root\` 密码：无" >> info.md
          echo "#### 默认软件包大小: $PROFILE MB" >> info.md
          cat info.md

      - name: Upload ImmortWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: Autobuild-x86-64-${{ env.NEW_VERSION }}
          body_path: ${{ github.workspace }}/info.md
          files: |
            ${{ github.workspace }}/*squashfs-combined-efi.*.gz
            ${{ github.workspace }}/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

